# -*- coding: utf-8 -*-
"""
/***************************************************************************
 HistogramHandler
                                 A QGIS plugin
 hanldes and updates db with histogram and path / drivenames
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-01-30
        git sha              : $Format:%H$
        copyright            : (C) 2019 by ASDFE
        email                : askho@sdfe.dk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import *
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .histogram_handler_dialog import HistogramHandlerDialog
import os.path
import psycopg2
import os
import subprocess
import socket
import win32api
import sys, getopt
import win32com.client
import math
import gdal
import os.path
import pathlib
import json
import sys
from pathlib import *

dirname, filename_NO_USE_ = os.path.split(os.path.abspath(__file__))
sys.path.append(os.path.abspath(dirname))
import gdalhist


class HistogramHandler:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'HistogramHandler_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Histogram Handler')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('HistogramHandler', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/histogram_handler/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Histogram Handler'),
                action)
            self.iface.removeToolBarIcon(action)

    def showFileSelectDialogInput(self):
        global fname1
        fname1 = str(QFileDialog.getExistingDirectory(None, 'text', os.path.dirname(__file__)))
        self.dlg.lineEdit.setText(str(fname1))
        print("fname",fname1)

    def run1(self):

        global IN_name
        global IN_host
        global IN_user
        global IN_pass
        global IN_sche
        global IN_tabl
        global IN_skip

        IN_user = self.dlg.lineEditUs.text()
        IN_pass = self.dlg.lineEditPa.text()
        IN_name = self.dlg.lineEditNa.text()
        IN_host = self.dlg.lineEditHo.text()
        IN_sche = self.dlg.lineEditSc.text()
        IN_tabl = self.dlg.lineEditTa.text()
        IN_skip = self.dlg.lineEditSk.text()

        return IN_name, IN_host, IN_user, IN_pass, IN_sche, IN_tabl, IN_skip



    def run(self):
        # Run method that performs all the real work

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = HistogramHandlerDialog()

        self.dlg.pushButton.clicked.connect(self.showFileSelectDialogInput)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:

            IN_drive = fname1[:2]

            def getusbname(driveletter):
                DiskDrive_DeviceID = []
                DiskDrive_Caption = []
                DiskPartition_DeviceID = []
                LogicalDisk_DeviceID = []
                drivename = 'Unknown'

                strComputer = "."
                objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
                objSWbemServices = objWMIService.ConnectServer(strComputer, "root\cimv2")

                # 1. Win32_DiskDrive
                colItems = objSWbemServices.ExecQuery("SELECT * FROM Win32_DiskDrive WHERE InterfaceType = \"USB\"")
                for i in range(0, len(colItems)):
                    DiskDrive_DeviceID.append(colItems[i].DeviceID.replace('\\', '').replace('.', ''))
                    DiskDrive_Caption.append(colItems[i].Caption)

                # 2. Win32_DiskDriveToDiskPartition
                colItems = objSWbemServices.ExecQuery("SELECT * from Win32_DiskDriveToDiskPartition")
                for objItem in colItems:
                    for i in range(0, len(DiskDrive_DeviceID)):
                        if DiskDrive_DeviceID[i] in str(objItem.Antecedent):
                            DiskPartition_DeviceID.append(objItem.Dependent.split('=')[1].replace('"', ''))

                # 3. Win32_LogicalDiskToPartition
                colItems = objSWbemServices.ExecQuery("SELECT * from Win32_LogicalDiskToPartition")
                for objItem in colItems:
                    for i in range(0, len(DiskPartition_DeviceID)):
                        if DiskPartition_DeviceID[i] in str(objItem.Antecedent):
                            LogicalDisk_DeviceID.append(objItem.Dependent.split('=')[1].replace('"', ''))

                # 4. Win32_LogicalDisk
                for i in range(0, len(LogicalDisk_DeviceID)):
                    colItems = objSWbemServices.ExecQuery(
                        "SELECT * from Win32_LogicalDisk WHERE DeviceID=\"" + LogicalDisk_DeviceID[i] + "\"")
                    # print 'LogicalDisk ', i, ' VolumeName:', colItems[0].VolumeName, '(' + LogicalDisk_DeviceID[i] + ')'
                    if str(LogicalDisk_DeviceID[i]) == driveletter:
                        drivename = colItems[0].VolumeName

                return drivename

            drevnavn = getusbname(IN_drive)

            # getting directory information and setting directoru of file containing user/pass etc. information
            global dirfile
            dir = os.getcwd()
            dirfile = Path(dir, "RunCheckDir.txt")

            # user inputs from gui (lineedits)
            IN_name, IN_host, IN_user, IN_pass, IN_sche, IN_tabl, IN_skip = self.run1()
            # print(IN_name, IN_host, IN_port, IN_user, IN_pass, IN_sche, IN_tabl, IN_skip)

            # Checking if file exists in directory, If it does NOT exist create a new file with the same name and writes the correct information to this file
            my_file = Path(dir, "imghistcred.txt")
            if len(IN_user) > 0:
                with open("imghistcred.txt", "w")as f:
                    file = open(my_file, "w")
                    #IN_name, IN_host, IN_port, IN_user, IN_pass, IN_sche, IN_tabl, IN_skip = self.run1()
                    db_data = {'db_name': IN_name, 'db_host': IN_host, 'db_user': IN_user, 'db_pass': IN_pass,
                                 'db_schema': IN_sche, 'db_table': IN_tabl, 'skipfactor': IN_skip}
                    json.dump(db_data,f)
                    f.closed
            elif my_file.is_file():
                with open("imghistcred.txt", "r")as f:
                    db_data = json.loads(f.read())
                    f.closed
                print("good")

            global db_name
            global db_host
            global db_user
            global db_pass
            global db_schema
            global db_table
            global db_geom
            global skipfactor


            db_name = db_data['db_name']
            db_host = db_data['db_host']
            db_user = db_data['db_user']
            db_pass = db_data['db_pass']
            db_schema = db_data['db_schema']
            db_table = db_data['db_table']
            skipfactor = IN_skip
            skipfactor = db_data['skipfactor']

            db_geom = "geom"
            print(db_name)

            conn = psycopg2.connect("dbname=" + db_name + " user=" + db_user + " host=" + db_host + " password=" + db_pass)
            cur = conn.cursor()
            print("after connection")


            def check_hist(filen):
                filstat = gdalhist.main(['', '-hist', filen])
                lowerlim = 999
                upperlim = 999
                for i in filstat:
                    if i[0] != 'value' and lowerlim == 999 and i[2] > 0.01 and i[4] > 0.01 and i[6] > 0.01:
                        lowerlim = i[0]
                    if i[0] != 'value' and upperlim == 999 and i[2] > 0.99 and i[4] > 0.99 and i[6] > 0.99:
                        upperlim = i[0]
                # print str(lowerlim) + " " + str(upperlim)
                return (lowerlim, upperlim)


            name1 = fname1[:2] + "\\" + fname1[3:]



            subprocess.call(["cmd", "/c", "dir "+name1+"\\*.jpg /s /b >" + dir+"//RunCheckDir.txt"])
            print("subprocess.call done")


            nowreadingnr = 0



            def file_len(fname):
                with open(fname) as f:
                    for i, l in enumerate(f):
                        pass
                return i + 1

            filantal = file_len(dirfile)
            print("filantal:",filantal)


            skipfactor = int(skipfactor)
            print("SKIPFACTOR:",skipfactor)
            with open(dirfile) as openfileobject:
                for line in openfileobject:
                    line = str.replace(line, "\n", "")
                    filnavn = os.path.basename(line)
                    filnavn = (os.path.splitext(filnavn)[0])
                    dbkald = "update " + db_schema + "." + db_table + " set \"path\" = \'"+ line +"\' WHERE imageid = \'" + str(filnavn)+"\'"
                    #print(dbkald)
                    cur.execute(dbkald)
                    dbkald = "update " + db_schema + "." + db_table + " set \"drive\" = \'" + drevnavn + "\' WHERE imageid = \'" + str(filnavn) + "\'"
                    cur.execute(dbkald)
                    #print(dbkald)
                    rowtal = cur.rowcount
                    conn.commit()
                    if rowtal == 1:
                        decimalnow = (nowreadingnr / skipfactor)
                        #print(decimalnow)
                        if str(decimalnow - int(decimalnow))[1:] == '.0':
                            try:
                                llim, ulim = check_hist(line)
                            except:
                                llim = 999
                                ulim = 999
                            print("File number", nowreadingnr, "out of", filantal, "done", "histogram values:",str(llim) + " " + str(ulim))
                            dbkald = "update " + db_schema + "." + db_table + " set \"hist_low\" = \'" + str(
                                llim) + "\' WHERE imageid = \'" + str(filnavn) + "\'"
                            cur.execute(dbkald)
                            dbkald = "update " + db_schema + "." + db_table + " set \"hist_high\" = \'" + str(
                                ulim) + "\' WHERE imageid = \'" + str(filnavn) + "\'"
                            cur.execute(dbkald)

                        nowreadingnr = nowreadingnr + 1
                        #pdone = int(float(nowreadingnr) / float(filantal)*10)
                        #print("File number", nowreadingnr, "out of", filantal, "done")
                    else:
                        print('cannot find foto',filnavn,' in DB')
                    conn.commit()

                    # pdone = int(float(nowreadingnr) / float(filantal) * 100)
                    # print("File number",pdone,"out of", filantal,"done")








